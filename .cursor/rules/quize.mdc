---
description:
globs:
alwaysApply: false
---
---
description: 確認テスト
globs: docs/*_quiz.md
alwaysApply: false
---

# Quize Rules

## 1. 学習目標との整合性（アラインメント）

確認テストは必ず学習目標と一致させる必要があります。例えば、「変数の概念を理解する」が目標なら、単に構文を暗記させる問題ではなく、変数の役割や使い方を理解しているかを測る問題を作成します。
学習目標については `memory-bank/curriculum.md` を参照してください。

## 2. 認知レベルのバランス（Bloomのタクソノミー）

Bloomの分類（知識→理解→適用→分析→総合→評価）の観点から、出題難易度や問いの深さに段階をつけます。

1. **知識（覚える・列挙する）**

   * 例：「Pythonでリストを作成する構文を挙げよ」「C言語でコメントを書く方法を答えよ」
   * ポイント：暗記レベルなので、短いキーワードや定義だけを問う。
2. **理解（説明する・要約する）**

   * 例：「このforループの処理を言葉で説明せよ」「ポインタの概念を自分の言葉で述べよ」
   * ポイント：丸暗記でなく、自分の言葉で説明できるかを確認。曖昧表現を避け、具体的なコード例を示す。
3. **適用（問題を解く・動作させる）**

   * 例：「以下のコードを実行するとコンソールに何が表示されるか答えよ」「この関数を使って文字列の長さを計算するプログラムを完成させよ」
   * ポイント：テンプレートコードを与え、空欄補充や一部変更して動作を予想させる。
4. **分析（比較する・分類する）**

   * 例：「この2つのソートアルゴリズムの違いをビッグオー記法で比較せよ」「このコードに含まれるバグを見つけ、理由を説明せよ」
   * ポイント：複数の要素を比較したり、コードを分解して因果関係を示せるようにする。
5. **総合（設計する・生成する）**

   * 例：「指定された仕様に基づいて、関数のアルゴリズムを設計せよ」「再帰を用いた階乗計算プログラムを書け」
   * ポイント：単一の正答ではなく、プロセスや設計意図を重視。部分点を与えやすい採点基準を明示しておく。
6. **評価（批判的に判断する・提案する）**

   * 例：「このコードの可読性や保守性について改善案を示しなさい」「オブジェクト指向設計と関数型プログラミングのメリット・デメリットを論じよ」
   * ポイント：正誤だけでなく、「なぜそう考えたのか」を記述させる。ルーブリック（採点規準）を明確化すると採点が客観的になる。

各レベルをバランス良く配置することで、ただ暗記だけではなく、思考力や応用力を測ることができます。

## 3. 形成的評価としての設計

確認テストは学習の途中段階で理解度を測る形成的評価として機能させます：

- 間違いから学べるような解説を含める

## 4. 実践的な文脈の提供

プログラミングは実践的なスキルなので、現実的な問題設定を心がけます：

- 抽象的な問題より、具体的なシナリオを使う
- 「変数xに5を代入せよ」より「商品の価格を保存する変数を作成せよ」

## 5. 段階的な難易度設定

学習者の自信を保ちながら挑戦させるため：

- 易しい問題から始めて徐々に難しくする
- 各問題に予想所要時間を明示する
- 部分点を設定して、完全な理解でなくても評価できるようにする

## 6. 多様な問題形式の活用

異なる形式で理解を多角的に評価：

- **記述問題(穴埋め)**：構文の理解度評価
- **記述問題(文章)**：概念の理解度評価
- **デバッグ問題**：構文の理解度評価
- **コード記述問題**：統合的な理解度評価
- **実行結果予測問題**：論理的思考力の評価

## 7. エラーパターンの活用

プログラミング初学者がよく陥る誤解やミスを問題に組み込みます：

- よくある文法エラーを含むコードを提示
- 初学者が混同しやすい概念を対比させる問題

## 8. 自己評価の促進

メタ認知能力を育てるため：

- 「なぜこの答えを選んだか」を説明させる
- 自信度を答えさせる
- 学習の振り返りを促す質問を含める
